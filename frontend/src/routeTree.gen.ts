/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as NotesImport } from './routes/_notes'
import { Route as IndexImport } from './routes/index'
import { Route as NotesNotesIndexImport } from './routes/_notes/notes/index'
import { Route as NotesNotesNoteImport } from './routes/_notes/notes/$note'

// Create/Update Routes

const NotesRoute = NotesImport.update({
  id: '/_notes',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const NotesNotesIndexRoute = NotesNotesIndexImport.update({
  id: '/notes/',
  path: '/notes/',
  getParentRoute: () => NotesRoute,
} as any)

const NotesNotesNoteRoute = NotesNotesNoteImport.update({
  id: '/notes/$note',
  path: '/notes/$note',
  getParentRoute: () => NotesRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_notes': {
      id: '/_notes'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof NotesImport
      parentRoute: typeof rootRoute
    }
    '/_notes/notes/$note': {
      id: '/_notes/notes/$note'
      path: '/notes/$note'
      fullPath: '/notes/$note'
      preLoaderRoute: typeof NotesNotesNoteImport
      parentRoute: typeof NotesImport
    }
    '/_notes/notes/': {
      id: '/_notes/notes/'
      path: '/notes'
      fullPath: '/notes'
      preLoaderRoute: typeof NotesNotesIndexImport
      parentRoute: typeof NotesImport
    }
  }
}

// Create and export the route tree

interface NotesRouteChildren {
  NotesNotesNoteRoute: typeof NotesNotesNoteRoute
  NotesNotesIndexRoute: typeof NotesNotesIndexRoute
}

const NotesRouteChildren: NotesRouteChildren = {
  NotesNotesNoteRoute: NotesNotesNoteRoute,
  NotesNotesIndexRoute: NotesNotesIndexRoute,
}

const NotesRouteWithChildren = NotesRoute._addFileChildren(NotesRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof NotesRouteWithChildren
  '/notes/$note': typeof NotesNotesNoteRoute
  '/notes': typeof NotesNotesIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof NotesRouteWithChildren
  '/notes/$note': typeof NotesNotesNoteRoute
  '/notes': typeof NotesNotesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_notes': typeof NotesRouteWithChildren
  '/_notes/notes/$note': typeof NotesNotesNoteRoute
  '/_notes/notes/': typeof NotesNotesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/notes/$note' | '/notes'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/notes/$note' | '/notes'
  id: '__root__' | '/' | '/_notes' | '/_notes/notes/$note' | '/_notes/notes/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  NotesRoute: typeof NotesRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  NotesRoute: NotesRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_notes"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_notes": {
      "filePath": "_notes.tsx",
      "children": [
        "/_notes/notes/$note",
        "/_notes/notes/"
      ]
    },
    "/_notes/notes/$note": {
      "filePath": "_notes/notes/$note.tsx",
      "parent": "/_notes"
    },
    "/_notes/notes/": {
      "filePath": "_notes/notes/index.tsx",
      "parent": "/_notes"
    }
  }
}
ROUTE_MANIFEST_END */
